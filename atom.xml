<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>pockyji upup</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://pockyji.github.io/"/>
  <updated>2019-02-27T08:13:05.667Z</updated>
  <id>http://pockyji.github.io/</id>
  
  <author>
    <name>pockyji</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Leetcode456 132 pattern</title>
    <link href="http://pockyji.github.io/2019/02/27/Leetcode456-132-pattern/"/>
    <id>http://pockyji.github.io/2019/02/27/Leetcode456-132-pattern/</id>
    <published>2019-02-27T07:26:04.000Z</published>
    <updated>2019-02-27T08:13:05.667Z</updated>
    
    <content type="html"><![CDATA[<p>##题目描述##<br><a href="https://leetcode.com/problems/132-pattern/" target="_blank" rel="noopener">https://leetcode.com/problems/132-pattern/</a><br>题目大意是在一个数组中如果存在一个子序列 [ai,aj,ak] 满足 i&lt;j&lt;k 且 ai&lt;ak&lt;aj ,则返回True,否则返回False。</p><p>##我的解法##<br>我自己的解法是对于一个数，假设它为ak,找到前面离它最近的比它大的数，则为满足条件的aj,并且可以为ai的选择提供尽可能大的空间。对于ai,利用统计的dmin[j-1](0~j-1中的最小值）来判断是否存在满足条件的ai。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">class Solution &#123;</span><br><span class="line">public:</span><br><span class="line">    bool find132pattern(vector&lt;int&gt;&amp; nums)&#123;</span><br><span class="line">        if(nums.size() &lt;= 2) return false;</span><br><span class="line">        int len = nums.size();</span><br><span class="line">        int dmin[len+10];</span><br><span class="line">        dmin[0] = nums[0];</span><br><span class="line">        for(int i = 2; i &lt; len; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            dmin[i-1] = min(dmin[i-2],nums[i-1]);</span><br><span class="line">            for(int j = i-1; j &gt; 0; j--)</span><br><span class="line">            &#123;</span><br><span class="line">                if(nums[j] &gt; nums[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    if(dmin[j-1] &lt; nums[i])&#123;</span><br><span class="line">                        return true;</span><br><span class="line">                    &#125;else&#123;</span><br><span class="line">                        break;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>##优质解法##<br>从后往前遍历数组，栈st用于维护当前未找到比它们大的aj的ak待定队列,s3用于记录当前满足条件的最大的ak。当遍历到的数小于s3时，即存在132pattern子序列。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">bool find132pattern(vector&lt;int&gt;&amp; nums) &#123;</span><br><span class="line">    int s3 = INT_MIN;</span><br><span class="line">    stack&lt;int&gt; st;</span><br><span class="line">    for( int i = nums.size()-1; i &gt;= 0; i -- )&#123;</span><br><span class="line">        if( nums[i] &lt; s3 ) return true;</span><br><span class="line">        else while( !st.empty() &amp;&amp; nums[i] &gt; st.top() )&#123; </span><br><span class="line">          s3 = st.top(); st.pop(); </span><br><span class="line">        &#125;</span><br><span class="line">        st.push(nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;##题目描述##&lt;br&gt;&lt;a href=&quot;https://leetcode.com/problems/132-pattern/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://leetcode.com/problems/132-pattern
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>HTTP协议知识小记</title>
    <link href="http://pockyji.github.io/2019/01/18/HTTP%E5%8D%8F%E8%AE%AE%E7%9F%A5%E8%AF%86%E5%B0%8F%E8%AE%B0/"/>
    <id>http://pockyji.github.io/2019/01/18/HTTP协议知识小记/</id>
    <published>2019-01-18T13:39:28.000Z</published>
    <updated>2019-01-18T13:40:22.463Z</updated>
    
    <content type="html"><![CDATA[<h1 id="HTTP协议知识小记"><a href="#HTTP协议知识小记" class="headerlink" title="HTTP协议知识小记"></a>HTTP协议知识小记</h1><p><strong>HTTP协议</strong>（HyperText Transfer Protocol，超文本传输协议）是因特网上应用最为广泛的一种网络传输协议，所有的WWW文件都必须遵守这个标准。<br>HTTP基于TCP/IP通信协议来传递数据。</p><h2 id="HTTP-工作原理"><a href="#HTTP-工作原理" class="headerlink" title="HTTP 工作原理"></a>HTTP 工作原理</h2><p>HTTP协议工作于客户端-服务端架构上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。<br>Web服务器根据接收到的请求后，向客户端发送响应信息。<br>HTTP默认端口号为80。  </p><h2 id="HTTP-主要特点"><a href="#HTTP-主要特点" class="headerlink" title="HTTP 主要特点"></a>HTTP 主要特点</h2><ul><li>支持<strong>客户/服务器模式</strong>（B/S、 C/S）。</li><li><strong>简单快速</strong>：客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</li><li><strong>灵活</strong>：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</li><li><strong>无连接</strong>：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</li><li><strong>无状态</strong>：HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</li></ul><h2 id="URI-与-URL"><a href="#URI-与-URL" class="headerlink" title="URI 与 URL"></a>URI 与 URL</h2><p>理解URI和URL的区别，我们引入URN这个概念。</p><p><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c3/URI_Euler_Diagram_no_lone_URIs.svg/220px-URI_Euler_Diagram_no_lone_URIs.svg.png" alt=""></p><ul><li>URI = Universal Resource Identifier 统一资源标志符  </li><li>URL = Universal Resource Locator 统一资源定位符  </li><li>URN = Universal Resource Name 统一资源名称</li></ul><p>统一资源标志符允许用户对网络中（一般指万维网）的资源通过特定的协议进行交互操作。URI的最常见的形式是统一资源定位符（URL），经常指定为非正式的网址。更罕见的用法是统一资源名称（URN），其目的是通过提供一种途径。用于在特定的名字空间资源的标识，以补充网址。<br>URI可被视为定位符（URL），名称（URN）或两者兼备。统一资源名（URN）如同一个人的名称，而统一资源定位符（URL）代表一个人的住址。换言之，URN定义某事物的身份，而URL提供查找该事物的方法。</p><p>通用URI格式：</p><p><strong>scheme:[//[user[:password]@]host[:port]][/path][?query][#fragment]</strong></p><p>通用URL格式：</p><p><strong>协议类型:[//[访问资源需要的凭证信息@]服务器地址[:端口号]][/资源层级UNIX文件路径]文件名[?查询][#片段ID]</strong></p><p>通用URN格式：</p><p><strong>urn:&lt;NID>:&lt;NSS></strong></p><h2 id="HTTP-消息结构"><a href="#HTTP-消息结构" class="headerlink" title="HTTP 消息结构"></a>HTTP 消息结构</h2><p>客户端请求消息Request由<strong>请求行（request line）、请求头部（header）、空行</strong>和<strong>请求数据</strong>四个部分组成</p><p><img src="http://www.runoob.com/wp-content/uploads/2013/11/2012072810301161.png" alt=""></p><p>服务器响应消息Response由<strong>状态行、消息报头、空行</strong>和<strong>响应正文</strong>四个部分组成</p><p><img src="http://www.runoob.com/wp-content/uploads/2013/11/httpmessage.jpg" alt=""></p><h2 id="HTTP-请求方法"><a href="#HTTP-请求方法" class="headerlink" title="HTTP 请求方法"></a>HTTP 请求方法</h2><p>根据HTTP标准，HTTP请求可以使用多种请求方法。<br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p><ul><li><strong>GET</strong> 请求指定的页面信息，并返回实体主体。</li><li><strong>HEAD</strong> 类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头</li><li><strong>POST</strong> 向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。</li><li><strong>PUT</strong> 从客户端向服务器传送的数据取代指定的文档的内容。</li><li><strong>DELETE</strong> 请求服务器删除指定的页面。</li><li><strong>CONNECT</strong> HTTP/1.1协议中预留给能够将连接改为管道方式的代理服务器。</li><li><strong>OPTIONS</strong> 允许客户端查看服务器的性能。</li><li><strong>TRACE</strong> 回显服务器收到的请求，主要用于测试或诊断。</li></ul><h2 id="HTTP-状态码"><a href="#HTTP-状态码" class="headerlink" title="HTTP 状态码"></a>HTTP 状态码</h2><p>HTTP状态码分类：</p><ul><li>1**　　信息，服务器收到请求，需要请求者继续执行操作</li><li>2**　　成功，操作被成功接收并处理</li><li>3**　　重定向，需要进一步的操作以完成请求</li><li>4**　　客户端错误，请求包含语法错误或无法完成请求</li><li>5**　　服务器错误，服务器在处理请求的过程中发生了错误</li></ul><p>常见状态码：</p><p>200 OK 客户端请求成功<br>400 Bad Request 客户端请求有语法错误，不能被服务器所理解<br>401 Unauthorized 请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用<br>403 Forbidden 服务器收到请求，但是拒绝提供服务<br>404 Not Found 请求资源不存在<br>500 Internal Server Error 服务器发生不可预期的错误<br>503 Server Unavailable 服务器当前不能处理客户端的请求，一段时间后可能恢复正常</p><h2 id="HTTP-消息报头"><a href="#HTTP-消息报头" class="headerlink" title="HTTP 消息报头"></a>HTTP 消息报头</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;HTTP协议知识小记&quot;&gt;&lt;a href=&quot;#HTTP协议知识小记&quot; class=&quot;headerlink&quot; title=&quot;HTTP协议知识小记&quot;&gt;&lt;/a&gt;HTTP协议知识小记&lt;/h1&gt;&lt;p&gt;&lt;strong&gt;HTTP协议&lt;/strong&gt;（HyperText Tran
      
    
    </summary>
    
    
  </entry>
  
</feed>
